name: Release
on:
  release:
    types: [published]
env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  RELEASE_TAG_PREFIX: 'v'
  JAVA_VERSION: '17.0.15'
jobs:
  test:
    name: 'Tests'
    runs-on: 'ubuntu-latest'
    outputs:
      release_version: ${{ steps.release_version.outputs.value }}
      extract_repository_name: ${{ steps.extract_repository_name.outputs.value }}
      commit_hash: ${{ steps.commit_hash.outputs.value }}
    steps:
      - name: "Output Agent IP" # in the event RAO blocks this agent, this can be used to debug it
        run: curl -s https://api.ipify.org
      - name: "📝 Store the current release version"
        id: release_version
        run: |
          export RELEASE_VERSION="${{ github.ref_name }}"
          export RELEASE_VERSION=${RELEASE_VERSION:${#RELEASE_TAG_PREFIX}}
          echo "Found Release Version: ${RELEASE_VERSION}"
          echo "value=${RELEASE_VERSION}" >> $GITHUB_OUTPUT
      - name: "Extract repository name"
        id: extract_repository_name
        run: |
          echo "value=${GITHUB_REPOSITORY##*/}" >> $GITHUB_OUTPUT
      - name: "📥 Checkout repository"
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: v${{ steps.release_version.outputs.value }}
          path: ${{ steps.extract_repository_name.outputs.value }}
      - name: 'Fetch release Commit Hash'
        id: commit_hash
        env:
          OWNER: ${{ github.repository_owner }}
          REPO: ${{ steps.extract_repository_name.outputs.value }}
          TAG: 'v${{ steps.release_version.outputs.value }}'
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          ref_json=$(gh api "repos/$OWNER/$REPO/git/ref/tags/$TAG")

          type=$(jq -r '.object.type' <<<"$ref_json")
          sha=$(jq -r '.object.sha'  <<<"$ref_json")

          if [ "$type" = "tag" ]; then
            sha=$(gh api "repos/$OWNER/$REPO/git/tags/$sha" --jq '.object.sha')
          fi

          echo "Found Commit Sha: $sha"

          echo "value=$sha" >>"$GITHUB_OUTPUT"
      - name: "☕️ Setup JDK"
        uses: actions/setup-java@v4
        with:
          distribution: liberica
          java-version: ${{ env.JAVA_VERSION }}
      - name: "🐘 Setup Gradle"
        uses: gradle/actions/setup-gradle@v4
        with:
          develocity-access-key: ${{ secrets.GRAILS_DEVELOCITY_ACCESS_KEY  }}
      - name: "🔨 Test project"
        working-directory: '${{ steps.extract_repository_name.outputs.value }}/tests'
        run: >
          ./gradlew test
          --continue --stacktrace
          --rerun-tasks
  source:
    name: "Source Distribution"
    needs: test
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      - name: "📥 Checkout repository"
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: v${{ needs.test.outputs.release_version }}
          path: ${{ needs.test.outputs.extract_repository_name }}
      - name: 'Determine Common Build Date' # to ensure a reproducible build
        working-directory: ${{ needs.test.outputs.extract_repository_name }}
        run: echo "SOURCE_DATE_EPOCH=$(git log -1 --pretty=%ct)" >> "$GITHUB_ENV"
      - name: "Generate Build Date file"
        working-directory: ${{ needs.test.outputs.extract_repository_name }}
        run: echo "$SOURCE_DATE_EPOCH" >> BUILD_DATE
      - name: "🗑️ Remove unnecessary files"
        run: |
          rm -f ${{ needs.test.outputs.extract_repository_name }}/tests/gradle/wrapper/gradle-wrapper.jar
          rm -f ${{ needs.test.outputs.extract_repository_name }}/tests/gradle/wrapper/gradle-wrapper.properties
          rm -f ${{ needs.test.outputs.extract_repository_name }}/tests/gradlew
          rm -f ${{ needs.test.outputs.extract_repository_name }}/tests/gradlew.bat
          rm -f ${{ needs.test.outputs.extract_repository_name }}/.asf.yaml
      - name: "Ensure source files use common date"
        run: |
          find . -depth \( -type f -o -type d \) -exec touch -d "@${SOURCE_DATE_EPOCH}" {} +
      - name: "📦 Create source distribution ZIP"
        run: |
          zip -r "apache-${{ needs.test.outputs.extract_repository_name }}-${{ needs.test.outputs.release_version }}-incubating-src.zip" ${{ needs.test.outputs.extract_repository_name }} -x '${{ needs.test.outputs.extract_repository_name }}/.git/*' -x '${{ needs.test.outputs.extract_repository_name }}/.github/*'
      - name: '🔐 Set up GPG'
        run: |
          echo "${{ secrets.GRAILS_GPG_KEY }}" | gpg --batch --import
          gpg --list-keys
        env:
          GPG_KEY_ID: ${{ secrets.GPG_KEY_ID }}
      - name: "🔏 Sign source distribution ZIP"
        env:
          GPG_KEY_ID: ${{ secrets.GPG_KEY_ID }}
        run: |
          gpg --default-key "${GPG_KEY_ID}" --batch --yes --pinentry-mode loopback --armor --detach-sign ./apache-${{ needs.test.outputs.extract_repository_name }}-${{ needs.test.outputs.release_version }}-incubating-src.zip
      - name: "📦 Create source distribution checksum"
        run: |
          sha512sum ./apache-${{ needs.test.outputs.extract_repository_name }}-${{ needs.test.outputs.release_version }}-incubating-src.zip > "apache-${{ needs.test.outputs.extract_repository_name }}-${{ needs.test.outputs.release_version }}-incubating-src.zip.sha512"
          cat ./apache-${{ needs.test.outputs.extract_repository_name }}-${{ needs.test.outputs.release_version }}-incubating-src.zip.sha512
      - name: "🚀 Upload ZIP and Signature to GitHub Release"
        uses: softprops/action-gh-release@da05d552573ad5aba039eaac05058a918a7bf631
        with:
          tag_name: v${{ needs.test.outputs.release_version }}
          files: |
            apache-${{ needs.test.outputs.extract_repository_name }}-${{ needs.test.outputs.release_version }}-incubating-src.zip
            apache-${{ needs.test.outputs.extract_repository_name }}-${{ needs.test.outputs.release_version }}-incubating-src.zip.sha512
            apache-${{ needs.test.outputs.extract_repository_name }}-${{ needs.test.outputs.release_version }}-incubating-src.zip.asc
  upload:
    needs: [ test, source ]
    runs-on: ubuntu-24.04
    permissions:
      contents: write
    env:
      SVN_USERNAME: ${{ secrets.SVC_DIST_GRAILS_USERNAME }}
      SVN_PASSWORD: ${{ secrets.SVC_DIST_GRAILS_PASSWORD }}
    steps:
      - name: "Output Agent IP" # in the event RAO blocks this agent, this can be used to debug it
        run: curl -s https://api.ipify.org
      - name: "Setup SVN and Tools"
        run: sudo apt-get install -y subversion subversion-tools tree gettext-base
      - name: "Ensure grails dev folder exists"
        run: |
          set -e

          if svn ls https://dist.apache.org/repos/dist/dev/incubator/grails --username "$SVN_USERNAME" --password "$SVN_PASSWORD" --non-interactive; then
            echo "Dev Folder 'grails' already exists — skipping creation"
          else
            echo "Dev Folder 'grails' does not exist, creating"
            svnmucc --username "$SVN_USERNAME" --password "$SVN_PASSWORD" --non-interactive \
              mkdir https://dist.apache.org/repos/dist/dev/incubator/grails \
              -m "Create 'grails' dev folder"
          fi
      - name: "Ensure grails actions folder exists"
        run: |
          set -e

          if svn ls https://dist.apache.org/repos/dist/dev/incubator/grails/actions --username "$SVN_USERNAME" --password "$SVN_PASSWORD" --non-interactive; then
            echo "Dev Folder 'grails/actions' already exists — skipping creation"
          else
            echo "Dev Folder 'grails/actions' does not exist, creating"
            svnmucc --username "$SVN_USERNAME" --password "$SVN_PASSWORD" --non-interactive \
              mkdir https://dist.apache.org/repos/dist/dev/incubator/grails/actions \
              -m "Create 'grails/actions' dev folder"
          fi
      - name: "Checkout dev repo"
        run: |
          svn checkout --username "$SVN_USERNAME" --password "$SVN_PASSWORD" --non-interactive https://dist.apache.org/repos/dist/dev/incubator/grails/actions dev-repo
      - name: "Remove existing dev version"
        run: |
          export VERSION="${{ needs.test.outputs.release_version }}"
          cd dev-repo
          if [ -d "$VERSION" ]; then
            svn delete "$VERSION"
            svn commit -m "Remove grails actions dev version $VERSION" --username "$SVN_USERNAME" --password "$SVN_PASSWORD" --non-interactive
          else
            echo "No existing dev version $VERSION to remove"
          fi
      - name: "Fetch source distributions"
        run: |
          export TAG="v${{ needs.test.outputs.release_version }}"
          export VERSION="${{ needs.test.outputs.release_version }}"
          cd dev-repo
          mkdir -p $VERSION/sources          
          cd $VERSION/sources
          curl -LO https://github.com/apache/${{ needs.test.outputs.extract_repository_name }}/releases/download/$TAG/apache-${{ needs.test.outputs.extract_repository_name }}-$VERSION-incubating-src.zip
          curl -LO https://github.com/apache/${{ needs.test.outputs.extract_repository_name }}/releases/download/$TAG/apache-${{ needs.test.outputs.extract_repository_name }}-$VERSION-incubating-src.zip.sha512
          curl -LO https://github.com/apache/${{ needs.test.outputs.extract_repository_name }}/releases/download/$TAG/apache-${{ needs.test.outputs.extract_repository_name }}-$VERSION-incubating-src.zip.asc
          echo "Downloaded the following files:"
          ls -l
      - name: "Upload distributions"
        run: |
          export TAG="v${{ needs.test.outputs.release_version }}"
          export VERSION="${{ needs.test.outputs.release_version }}"
          cd dev-repo
          echo "Adding the following files to SVN:"
          tree
          svn add $VERSION --force
          svn commit -m "Upload grails actions distribution files for $VERSION" --username "$SVN_USERNAME" --password "$SVN_PASSWORD" --non-interactive
          pwd
      - name: "Store Distribution SVN revision"
        run: |
          export VERSION="${{ needs.test.outputs.release_version }}"
          cd dev-repo
          svn info $VERSION > "DIST_SVN_REVISION.txt"
      - name: "Upload Distribution SVN revision"
        uses: softprops/action-gh-release@v2
        with:
          files: dev-repo/DIST_SVN_REVISION.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: "📥 Checkout repository"
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: v${{ needs.test.outputs.release_version }}
          path: "grails-github-actions"
      - name: 'Initial Vote Email'
        env:
          VERSION: ${{ needs.test.outputs.release_version }}
          VERSION_COMMIT_ID: ${{ needs.test.outputs.commit_hash }}
        run: |
          export DIST_SVN_REVISION=$(awk '/Last Changed Rev:/ {print $4}' dev-repo/DIST_SVN_REVISION.txt)
          
          echo "*************************************************"
          echo "Subject: [VOTE] Release Apache Grails (incubating) GitHub Actions ${VERSION}"
          echo "*************************************************"
          echo "Body:"
          echo "*************************************************"
          cat grails-github-actions/.github/vote_templates/staged.txt | envsubst
          echo "*************************************************"
      - name: 'Groovy Vote Email'
        env:
          VERSION: ${{ needs.test.outputs.release_version }}
          VERSION_COMMIT_ID: ${{ needs.test.outputs.commit_hash }}
        run: |
          export DIST_SVN_REVISION=$(awk '/Last Changed Rev:/ {print $4}' dev-repo/DIST_SVN_REVISION.txt)
          
          echo "*************************************************"
          echo "Subject: [VOTE] Approval of Apache Grails (incubating) GitHub Actions ${VERSION} release by Groovy PMC"
          echo "*************************************************"
          echo "Body:"
          echo "*************************************************"
          cat grails-github-actions/.github/vote_templates/groovy_pmc.txt | envsubst
          echo "*************************************************"
      - name: 'Announcement Email'
        env:
          VERSION: ${{ needs.test.outputs.release_version }}
          VERSION_COMMIT_ID: ${{ needs.test.outputs.commit_hash }}
          PREVIOUS_VERSION: 'TODO_PREVIOUS_VERSION'
        run: |
          export DIST_SVN_REVISION=$(awk '/Last Changed Rev:/ {print $4}' dev-repo/DIST_SVN_REVISION.txt)
          
          echo "*************************************************"
          echo "Subject: [ANNOUNCE] Apache Grails (incubating) GitHub Actions ${VERSION}"
          echo "*************************************************"
          echo "Body:"
          echo "*************************************************"
          cat grails-github-actions/.github/vote_templates/announce.txt | envsubst
          echo "*************************************************"
